#version 410 core

layout(vertices=4) out;

uniform mat4 model;
uniform mat4 mainView;
uniform float fovCos;
uniform int outOfFrustumTessLevel = 0;
uniform bool disableFrustumCulling = false;

in vec2 TexCoord[];
out vec2 TextureCoord[];

void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    TextureCoord[gl_InvocationID] = TexCoord[gl_InvocationID];

    if(gl_InvocationID == 0)
    {
        const int MIN_TESS_LEVEL = 4;
        const int MAX_TESS_LEVEL = 64;
        const float MIN_DISTANCE = 20;
        const float MAX_DISTANCE = 1000;

        vec4 eyeSpacePos00 = mainView * model * gl_in[0].gl_Position;
        vec4 eyeSpacePos01 = mainView * model * gl_in[1].gl_Position;
        vec4 eyeSpacePos10 = mainView * model * gl_in[2].gl_Position;
        vec4 eyeSpacePos11 = mainView * model * gl_in[3].gl_Position;

        // calculate cos of the angle between the camera and -z(0.0, 0.0, -1.0)
        float cosAngle00 = dot(normalize(eyeSpacePos00.xyz), vec3(0.0, 0.0, -1.0));
        float cosAngle01 = dot(normalize(eyeSpacePos01.xyz), vec3(0.0, 0.0, -1.0));
        float cosAngle10 = dot(normalize(eyeSpacePos10.xyz), vec3(0.0, 0.0, -1.0));
        float cosAngle11 = dot(normalize(eyeSpacePos11.xyz), vec3(0.0, 0.0, -1.0));

        float tessLevel0 = outOfFrustumTessLevel;
        float tessLevel1 = outOfFrustumTessLevel;
        float tessLevel2 = outOfFrustumTessLevel;
        float tessLevel3 = outOfFrustumTessLevel;

        if (cosAngle00 >= fovCos ||
            cosAngle01 >= fovCos ||
            cosAngle10 >= fovCos ||
            cosAngle11 >= fovCos ||
            disableFrustumCulling)
        {
            // calculate the distance from the camera to the corners of the screen at the model space
            float dist00 = length(eyeSpacePos00.xyz);
            float dist01 = length(eyeSpacePos01.xyz);
            float dist10 = length(eyeSpacePos10.xyz);
            float dist11 = length(eyeSpacePos11.xyz);

            // "distance" from camera scaled between 0 and 1
            float distance00 = clamp( (dist00 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
            float distance01 = clamp( (dist01 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
            float distance10 = clamp( (dist10 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );
            float distance11 = clamp( (dist11 - MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0 );

            tessLevel0 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, pow(min(distance10, distance00), 3.0) );
            tessLevel1 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, pow(min(distance00, distance01), 3.0) );
            tessLevel2 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, pow(min(distance01, distance11), 3.0) );
            tessLevel3 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, pow(min(distance11, distance10), 3.0) );
        }

        gl_TessLevelOuter[0] = tessLevel0;
        gl_TessLevelOuter[1] = tessLevel1;
        gl_TessLevelOuter[2] = tessLevel2;
        gl_TessLevelOuter[3] = tessLevel3;

        gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
        gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);
    }
}